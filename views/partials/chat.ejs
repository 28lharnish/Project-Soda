<div id="chat">
    <% if (locals?.currentRoom) { %>
        <div id="messages-box" onload="scrollToBottom()">
        <% currentRoom.messages.reverse() %>
        <% currentRoom.messages.forEach(message=> { %>
            <% let msgHtml=include('./message.ejs') %>
            <% let senderUsername=message.sender.username; %>
            <% let id=message.id; %>
            <% let pfpFilePath=message.sender.pfpfilename; %>
            <% let messageText=message.text; %>
            <% let timestamp=new Date(message.timestamp).toLocaleString(); %>
            <% let isYou=message.sender.id===user.id; %>
            <% // I know. I hate it too but there is no time to find a better way and Ido not want to have it refresh everytime there is a new message%>
            <% if(!isYou) { 
                msgHtml=msgHtml.replace("you", "" );
                msgHtml=msgHtml.replace('<button onclick="deleteMessage()">delete</button>','')
            } %>

            <% if(message.attachments) {
                    attachmentsNew = message.attachments.split(',');
                    let attachDivHTML = '<div class="attachments">';
                    console.log(message.attachments)
                    for(attachment in attachmentsNew) {
                        attachDivHTML += `<div class="attachment" onclick="showAttachment(this.children[0])"><img onerror="this.src='/public/img/STEVEN.png'" src="${attachmentsNew[attachment]}"/></div>`
                    }
                    
                    msgHtml = msgHtml.replace('<div class="attach"></div>', attachDivHTML + '</div>');
            } %>
            <% msgHtml = msgHtml.replace('SETMESSAGEID', id) %>
            <%- msgHtml.replace("PFPFILEPATH",pfpFilePath.replaceAll('\\', '\\\\')).replace("SENDERUSERNAME",isYou ? "You":senderUsername).replace("MESSAGETEXT",messageText).replace("TIMESTAMP",timestamp); %>
        <% }) %>
        </div>

        <div id="chat-ui">

            <div id="attachment-holder">
            </div>

            <!-- long line moment-->
            <textarea id="message-textbox" resizeable="false"
                maxlength="<%= cfg.messageRequirements.maxMessageLength %>"
                minlength="<%=cfg.messageRequirements.minMessageLength %>"></textarea>
            <button id="uploadImage" type="button" onclick="document.getElementById('uploadImageFiles').value='';document.getElementById('uploadImageFiles').click()">
                <img src="/public/img/add-circle-outline.svg" alt="">
            </button>
            <input type="file" id="uploadImageFiles" accept="image/*, .gurt" hidden multiple>
            <button id="send-btn" type="submit" onclick="sendMessage()">Send</button>
        </div>

        <script>
            document.getElementById('uploadImageFiles').addEventListener("change", handleFiles, true);

            function handleFiles() {
                for(file in this.files) {
                    if(Array.from(document.getElementById('uploadImageFiles').files).indexOf(this.files[file])==-1) continue;
                    if(getAllAttachments().length > 10) break; //limit to 10 files at a time
                    socket.emit("upload", this.files[file], this.files[file].name, (status) => {
                        if(status.attachmentUrl) {
                            document.getElementById('attachment-holder').innerHTML += `<div class="attachment"  onclick="showAttachment(this.children[0])"><img onerror="this.src='/public/img/STEVEN.png'" src="${status.attachmentUrl}"></div>`;
                            document.getElementById('attachment-holder').className = 'shown';
                        }
                        console.log(status);
                    });
                }
                
            }



            window.onload = scrollToBottom;

            let messageBox = document.getElementById('message-textbox');
            let messagesContainer = document.getElementById('messages-box');

            let sendPressed = false;

            let downKeys = [];
            //I don't even know
            downKeys['shift'] = false;

            document.addEventListener('keydown', function (e) {

                let key = e.key.toLowerCase();
                if(key === 'enter') e.preventDefault();
                downKeys[key] = true;
            });

            document.addEventListener('keyup', function (e) {
                let key = e.key.toLowerCase();
                downKeys[key] = false;
            });

            function keyDown(key){
                if(downKeys[key]){
                    return true;
                } else {
                    return false;
                }
            }

            setInterval(function(){
                if(document.activeElement !== messageBox){
                    return;
                }

                if(!keyDown("enter")){
                    sendPressed = false;
                }

                if(keyDown("enter") && keyDown("shift") && !sendPressed) {
                    messageBox.value += "\n"
                    console.log("NEW LINE");
                    sendPressed = true;
                } else if(keyDown("enter") && !sendPressed){
                    sendMessage();
                    console.log("SEND MESSAGE");
                    sendPressed = true;
                }

            }, 16);

            function deleteMessage(msg) {
                console.log(`Attempting to delete message ${msg.dataset.messageId}`)
                if (!msg.hasAttribute('you')) return console.log('Message not owned by user.')

                // do errors on server!!!!!!
            }

            socket.on('message', (message) => {
                console.log(message)
                if (message.roomid == "<%= currentRoom.id %>") {
                    if(Notification.permission == 'granted' && !document.hasFocus() && !message.isYou) new Notification("New Message", { body: message.text, icon: message.sender.pfpfilename });
                    addMessage(message.attachments, message.text, message.timestamp, message.sender, message.id);
                    let activityNotifier = document.querySelector(`#notifier-${message.roomid}.activity-notifier`);
                    if(activityNotifier){
                        activityNotifier.style.display = 'none';
                    }
                }
            });

            function scrollToBottom() {
                let scrollHeight = messagesContainer.scrollHeight
                messagesContainer.scrollTop = scrollHeight;
            }

            //Thank you Jimmy GPT
            function sanitizeText(text) {
                const element = document.createElement('div');
                element.textContent = text; // This will escape special characters
                return element.innerHTML;    // Get the HTML-escaped string
            }

            function getAllAttachments() {
                let attachments = [];
                let attachmentElements = document.querySelectorAll('#attachment-holder .attachment img');
                attachmentElements.forEach(img => {
                    attachments.push(img.getAttribute('src'));
                });
                return attachments;
            }

            function sendMessage() {
                let message = {
                    attachments: getAllAttachments(),
                    text: sanitizeText(messageBox.value),
                    timestamp: new Date().toISOString(),
                    roomid: "<%= currentRoom?.id %>",
                    senderid: "<%= user.id %>"
                }

                console.log(message.text)

                document.getElementById('attachment-holder').className = '';
                document.getElementById('attachment-holder').innerHTML = '';
                messageBox.value = "";

                socket.emit('message', message);
            }

            function addMessage(attachments, text, timestamp, sender, id) {
                let msgHtml = `<%- include('./message.ejs'); %>`;
                let isYou = sender.id == "<%= user.id %>";
                let convertedTimestamp = new Date(timestamp).toLocaleString();
                //I hate this just as much as you do
                if(!isYou) { 
                    msgHtml=msgHtml.replace("you", "" );
                    msgHtml=msgHtml.replace('<button onclick="deleteMessage()">delete</button>','')
                }
                msgHtml = msgHtml.replace("SETMESSAGEID", id);
                msgHtml = msgHtml.replace("PFPFILEPATH", sender.pfpfilename.replaceAll('\\', '\\\\')).replace("SENDERUSERNAME", isYou ? "You" : sender.username).replace("MESSAGETEXT", text.replaceAll("\n", "<br>")).replace("TIMESTAMP", convertedTimestamp);
                
                if(attachments) {
                    console.log(attachments)
                    attachmentsNew = attachments.split(',');
                    let attachDivHTML = '<div class="attachments">';

                    for(attachment in attachmentsNew) {
                        attachDivHTML += `<div class="attachment" onclick="showAttachment(this.children[0])"><img onerror="this.src='/public/img/STEVEN.png'" src="${attachmentsNew[attachment]}"/></div>`
                    }
                    
                    msgHtml = msgHtml.replace('<div class="attach"></div>', attachDivHTML + '</div>');
                }

                messagesContainer.innerHTML += msgHtml;
                twemoji.parse(document.body);
                scrollToBottom();
            }

            function showAttachment(a) {
                document.getElementById('imageViewer').querySelector('img').src = a.src;
                document.getElementById('imageViewer').querySelector('button.saveImage').setAttribute('onclick', `window.open("${a.src}");`);
                document.getElementById('imageViewer').className = 'shown';

                window.addEventListener('keydown', escapeCloser);
            }

            //  workaround because im genuinely lazy

            function escapeCloser(e) {
                if(e.key.toLowerCase() == 'escape') {
                    document.getElementById('imageViewer').className = '';
                    window.removeEventListener('keydown', escapeCloser);
                }
            }

        </script>

    <% } %>


</div>